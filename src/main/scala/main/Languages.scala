package main

//AUTOGENERATED

class Language(val name: String) {
  object Type extends Enumeration {
    type LangType = Value
    val Data, Programming, Markup, Default = Value
  }

  
  def langType = Type.Default

  def lexer = "plain"
  
  def aliases: List[String] = name.toLowerCase :: Nil
  
  def extensions: List[String] = Nil
  
  def primaryExtension = extensions.head
  
  def overrides: List[String] = Nil
  
  def searchable_? = true
  
  def filenames: List[String] = Nil
  
  def group: Option[String] = None
  
  def popular = false

  override def toString = name

  override def equals(that: Any) : Boolean = {
    that.isInstanceOf[Language] && (this.name == that.asInstanceOf[Language].name)
  }

  override def hashCode = name.hashCode
}

object Language {

	
	
	private val languages = List(
"ASP" -> new Language("ASP") {
override def langType = Type.Programming
override def aliases = "aspx" :: "aspx-vb" :: name.toLowerCase :: Nil
override def primaryExtension = ".asp"
override def extensions = ".asax" :: ".ascx" :: ".ashx" :: ".asmx" :: ".asp" :: ".aspx" :: ".axd" :: Nil
override def lexer = "xml"
},
"ActionScript" -> new Language("ActionScript") {
override def langType = Type.Programming
override def aliases = "as3" :: name.toLowerCase :: Nil
override def extensions = ".as" :: Nil
override def popular = true
override def lexer = "as3"
},
"Ada" -> new Language("Ada") {
override def langType = Type.Programming
override def extensions = ".adb" :: ".ads" :: Nil
},
"AppleScript" -> new Language("AppleScript") {
override def primaryExtension = ".scpt"
override def extensions = ".applescript" :: ".scpt" :: Nil
},
"Arc" -> new Language("Arc") {
override def langType = Type.Programming
override def extensions = ".arc" :: Nil
},
"Arduino" -> new Language("Arduino") {
override def langType = Type.Programming
override def extensions = ".ino" :: Nil
},
"Assembly" -> new Language("Assembly") {
override def langType = Type.Programming
override def aliases = "nasm" :: name.toLowerCase :: Nil
override def extensions = ".asm" :: Nil
},
"AutoHotkey" -> new Language("AutoHotkey") {
override def langType = Type.Programming
override def aliases = "ahk" :: name.toLowerCase :: Nil
override def extensions = ".ahk" :: Nil
},
"Batchfile" -> new Language("Batchfile") {
override def langType = Type.Programming
override def group = Some("Shell")
override def aliases = "bat" :: name.toLowerCase :: Nil
override def primaryExtension = ".bat"
override def extensions = ".bat" :: ".cmd" :: Nil
},
"Befunge" -> new Language("Befunge") {
override def extensions = ".befunge" :: Nil
},
"BlitzMax" -> new Language("BlitzMax") {
override def extensions = ".bmx" :: Nil
},
"Boo" -> new Language("Boo") {
override def langType = Type.Programming
override def extensions = ".boo" :: Nil
},
"Brainfuck" -> new Language("Brainfuck") {
override def extensions = ".b" :: ".bf" :: Nil
},
"C" -> new Language("C") {
override def langType = Type.Programming
override def overrides = ".h" :: Nil
override def primaryExtension = ".c"
override def extensions = ".c" :: ".h" :: Nil
override def popular = true
override def lexer = "c"
},
"C#" -> new Language("C#") {
override def langType = Type.Programming
override def aliases = "csharp" :: name.toLowerCase :: Nil
override def extensions = ".cs" :: Nil
override def popular = true
override def lexer = "csharp"
},
"C++" -> new Language("C++") {
override def langType = Type.Programming
override def aliases = "cpp" :: name.toLowerCase :: Nil
override def primaryExtension = ".cpp"
override def extensions = ".c++" :: ".cc" :: ".cpp" :: ".cu" :: ".cxx" :: ".h" :: ".h++" :: ".hh" :: ".hpp" :: ".hxx" :: ".tcc" :: Nil
override def popular = true
override def lexer = "cpp"
},
"C-ObjDump" -> new Language("C-ObjDump") {
override def langType = Type.Data
override def extensions = ".c-objdump" :: Nil
},
"CMake" -> new Language("CMake") {
override def extensions = ".cmake" :: ".cmake.in" :: Nil
override def filenames = "CMakeLists.txt" :: Nil
},
"CSS" -> new Language("CSS") {
override def extensions = ".css" :: Nil
override def popular = true
override def lexer = "css"
},
"ChucK" -> new Language("ChucK") {
override def extensions = ".ck" :: Nil
},
"Clojure" -> new Language("Clojure") {
override def langType = Type.Programming
override def primaryExtension = ".clj"
override def extensions = ".clj" :: ".cljs" :: Nil
},
"CoffeeScript" -> new Language("CoffeeScript") {
override def langType = Type.Programming
override def aliases = "coffee" :: name.toLowerCase :: Nil
override def extensions = ".coffee" :: Nil
override def filenames = "Cakefile" :: Nil
},
"ColdFusion" -> new Language("ColdFusion") {
override def langType = Type.Programming
override def aliases = "cfm" :: name.toLowerCase :: Nil
override def primaryExtension = ".cfm"
override def extensions = ".cfc" :: ".cfm" :: Nil
override def lexer = "coldfusion"
},
"Common Lisp" -> new Language("Common Lisp") {
override def langType = Type.Programming
override def aliases = "lisp" :: name.toLowerCase :: Nil
override def primaryExtension = ".lisp"
override def extensions = ".lisp" :: ".ny" :: Nil
override def popular = true
},
"Cpp-ObjDump" -> new Language("Cpp-ObjDump") {
override def langType = Type.Data
override def extensions = ".cppobjdump" :: ".c++objdump" :: ".cxx-objdump" :: Nil
},
"Cucumber" -> new Language("Cucumber") {
override def extensions = ".feature" :: Nil
},
"Cython" -> new Language("Cython") {
override def langType = Type.Programming
override def group = Some("Python")
override def primaryExtension = ".pyx"
override def extensions = ".pxd" :: ".pxi" :: ".pyx" :: Nil
},
"D" -> new Language("D") {
override def langType = Type.Programming
override def extensions = ".d" :: ".di" :: Nil
},
"D-ObjDump" -> new Language("D-ObjDump") {
override def langType = Type.Data
override def extensions = ".d-objdump" :: Nil
},
"Darcs Patch" -> new Language("Darcs Patch") {
override def aliases = "dpatch" :: name.toLowerCase :: Nil
override def extensions = ".darcspatch" :: ".dpatch" :: Nil
},
"Delphi" -> new Language("Delphi") {
override def langType = Type.Programming
override def primaryExtension = ".pas"
override def extensions = ".dpr" :: ".pas" :: Nil
override def lexer = "delphi"
},
"Diff" -> new Language("Diff") {
override def extensions = ".diff" :: ".patch" :: Nil
override def popular = true
override def lexer = "diff"
},
"Dylan" -> new Language("Dylan") {
override def langType = Type.Programming
override def extensions = ".dylan" :: Nil
},
"Eiffel" -> new Language("Eiffel") {
override def langType = Type.Programming
override def extensions = ".e" :: Nil
},
"Emacs Lisp" -> new Language("Emacs Lisp") {
override def langType = Type.Programming
override def aliases = "elisp" :: name.toLowerCase :: Nil
override def primaryExtension = ".el"
override def extensions = ".el" :: ".emacs" :: Nil
override def popular = true
},
"Erlang" -> new Language("Erlang") {
override def langType = Type.Programming
override def primaryExtension = ".erl"
override def extensions = ".erl" :: ".hrl" :: Nil
override def popular = true
override def lexer = "erl"
},
"F#" -> new Language("F#") {
override def langType = Type.Programming
override def extensions = ".fs" :: ".fsi" :: ".fsx" :: Nil
},
"FORTRAN" -> new Language("FORTRAN") {
override def langType = Type.Programming
override def primaryExtension = ".f90"
override def extensions = ".F" :: ".F77" :: ".F90" :: ".F95" :: ".F03" :: ".F08" :: ".FPP" :: ".f" :: ".f77" :: ".f90" :: ".f95" :: ".f03" :: ".f08" :: ".for" :: ".fpp" :: Nil
}, 
"Factor" -> new Language("Factor") {
override def langType = Type.Programming
override def extensions = ".factor" :: Nil
},
"Fancy" -> new Language("Fancy") {
override def langType = Type.Programming
override def primaryExtension = ".fy"
override def extensions = ".fancypack" :: ".fy" :: Nil
},
"GAS" -> new Language("GAS") {
override def langType = Type.Programming
override def group = Some("Assembly")
override def primaryExtension = ".s"
override def extensions = ".S" :: ".s" :: Nil
},
"Genshi" -> new Language("Genshi") {
override def extensions = ".kid" :: Nil
},
"Gentoo Ebuild" -> new Language("Gentoo Ebuild") {
override def group = Some("Shell")
override def extensions = ".ebuild" :: Nil
},
"Gentoo Eclass" -> new Language("Gentoo Eclass") {
override def group = Some("Shell")
override def extensions = ".eclass" :: Nil
},
"Gettext Catalog" -> new Language("Gettext Catalog") {
override def searchable_? = false
override def aliases = "pot" :: name.toLowerCase :: Nil
override def extensions = ".po" :: ".pot" :: Nil
},
"Go" -> new Language("Go") {
override def langType = Type.Programming
override def extensions = ".go" :: Nil
},
"Gosu" -> new Language("Gosu") {
override def langType = Type.Programming
override def primaryExtension = ".gs"
override def extensions = ".gs" :: ".gsp" :: ".gst" :: ".gsx" :: ".vark" :: Nil
},
"Groff" -> new Language("Groff") {
override def primaryExtension = ".man"
override def extensions = ".1" :: ".2" :: ".3" :: ".4" :: ".5" :: ".6" :: ".7" :: ".man" :: Nil
},
"Groovy" -> new Language("Groovy") {
override def langType = Type.Programming
override def primaryExtension = ".groovy"
override def extensions = ".gradle" :: ".groovy" :: Nil
override def lexer = "groovy"
},
"Groovy Server Pages" -> new Language("Groovy Server Pages") {
override def group = Some("Groovy")
override def overrides = ".gsp" :: Nil
override def aliases = "gsp" :: name.toLowerCase :: Nil
override def extensions = ".gsp" :: Nil
},
"HTML" -> new Language("HTML") {
override def langType = Type.Markup
override def primaryExtension = ".html"
override def extensions = ".htm" :: ".html" :: ".xhtml" :: ".xslt" :: Nil
override def popular = true
override def lexer = "html"
},
"HTML+Django" -> new Language("HTML+Django") {
override def langType = Type.Markup
override def group = Some("HTML")
override def extensions = ".mustache" :: Nil
},
"HTML+ERB" -> new Language("HTML+ERB") {
override def langType = Type.Markup
override def group = Some("HTML")
override def primaryExtension = ".erb"
override def extensions = ".erb" :: ".html.erb" :: Nil
},
"HTML+PHP" -> new Language("HTML+PHP") {
override def langType = Type.Markup
override def group = Some("HTML")
override def extensions = ".phtml" :: Nil
},
"HaXe" -> new Language("HaXe") {
override def langType = Type.Programming
override def extensions = ".hx" :: ".hxml" :: ".mtt" :: Nil
},
"Haml" -> new Language("Haml") {
override def group = Some("HTML")
override def langType = Type.Markup
override def extensions = ".haml" :: Nil
},
"Haskell" -> new Language("Haskell") {
override def langType = Type.Programming
override def extensions = ".hs" :: ".hsc" :: Nil
override def popular = true
},
"INI" -> new Language("INI") {
override def langType = Type.Data
override def extensions = ".cfg" :: ".ini" :: ".prefs" :: ".properties" :: Nil
override def filenames = ".gitconfig" :: Nil
},
"IRC log" -> new Language("IRC log") {
override def aliases = "irc" :: name.toLowerCase :: Nil
override def extensions = ".weechatlog" :: Nil
},
"Io" -> new Language("Io") {
override def langType = Type.Programming
override def extensions = ".io" :: Nil
},
"Ioke" -> new Language("Ioke") {
override def langType = Type.Programming
override def extensions = ".ik" :: Nil
},
"JSON" -> new Language("JSON") {
override def langType = Type.Data
override def group = Some("JavaScript")
override def searchable_? = false
override def extensions = ".json" :: Nil
override def lexer = "js"
},
"Java" -> new Language("Java") {
override def langType = Type.Programming
override def extensions = ".java" :: ".pde" :: Nil
override def popular = true
override def lexer = "java"
},
"Java Server Pages" -> new Language("Java Server Pages") {
override def group = Some("Java")
override def aliases = "jsp" :: name.toLowerCase :: Nil
override def extensions = ".jsp" :: Nil
},
"JavaScript" -> new Language("JavaScript") {
override def langType = Type.Programming
override def aliases = "js" :: "node" :: name.toLowerCase :: Nil
override def primaryExtension = ".js"
override def extensions = ".bones" :: ".jake" :: ".js" :: ".jsm" :: ".jss" :: ".jsx" :: ".pac" :: ".sjs" :: ".ssjs" :: Nil
override def filenames = "Jakefile" :: Nil
override def popular = true
override def lexer = "js"
},
"LLVM" -> new Language("LLVM") {
override def extensions = ".ll" :: Nil
},
"LilyPond" -> new Language("LilyPond") {
override def primaryExtension = ".ly"
override def extensions = ".ily" :: ".ly" :: Nil
},
"Literate Haskell" -> new Language("Literate Haskell") {
override def langType = Type.Programming
override def group = Some("Haskell")
override def aliases = "lhs" :: name.toLowerCase :: Nil
override def extensions = ".lhs" :: Nil
},
"Lua" -> new Language("Lua") {
override def langType = Type.Programming
override def primaryExtension = ".lua"
override def extensions = ".lua" :: ".nse" :: Nil
override def popular = true
},
"Makefile" -> new Language("Makefile") {
override def extensions = ".mak" :: ".mk" :: Nil
override def filenames = "makefile" :: "GNUmakefile" :: "Makefile" :: Nil
},
"Mako" -> new Language("Mako") {
override def extensions = ".mao" :: Nil
},
"Markdown" -> new Language("Markdown") {
override def langType = Type.Markup
override def primaryExtension = ".md"
override def extensions = ".markdown" :: ".md" :: ".mkd" :: ".mkdown" :: ".ron" :: Nil
},
"Matlab" -> new Language("Matlab") {
override def langType = Type.Programming
override def primaryExtension = ".matlab"
override def extensions = ".m" :: ".matlab" :: Nil
},
"Max/MSP" -> new Language("Max/MSP") {
override def langType = Type.Programming
override def extensions = ".mxt" :: Nil
},
"MiniD" -> new Language("MiniD") {
override def searchable_? = false
override def primaryExtension = ".minid"
},
"Mirah" -> new Language("Mirah") {
override def langType = Type.Programming
override def extensions = ".duby" :: ".mir" :: ".mirah" :: Nil
},
"Moocode" -> new Language("Moocode") {
override def extensions = ".moo" :: Nil
},
"Myghty" -> new Language("Myghty") {
override def extensions = ".myt" :: Nil
},
"Nemerle" -> new Language("Nemerle") {
override def langType = Type.Programming
override def extensions = ".n" :: Nil
},
"Nimrod" -> new Language("Nimrod") {
override def extensions = ".nim" :: Nil
},
"Nu" -> new Language("Nu") {
override def langType = Type.Programming
override def aliases = "nush" :: name.toLowerCase :: Nil
override def extensions = ".nu" :: Nil
override def filenames = "Nukefile" :: Nil
},
"NumPy" -> new Language("NumPy") {
override def group = Some("Python")
override def primaryExtension = ".numpy"
override def extensions = ".numpy" :: ".numpyw" :: ".numsc" :: Nil
},
"OCaml" -> new Language("OCaml") {
override def langType = Type.Programming
override def primaryExtension = ".ml"
override def extensions = ".ml" :: ".mli" :: ".mll" :: ".mly" :: Nil
},
"ObjDump" -> new Language("ObjDump") {
override def langType = Type.Data
override def extensions = ".objdump" :: Nil
},
"Objective-C" -> new Language("Objective-C") {
override def langType = Type.Programming
override def overrides = ".m" :: Nil
override def primaryExtension = ".m"
override def extensions = ".h" :: ".m" :: ".mm" :: Nil
override def popular = true
},
"Objective-J" -> new Language("Objective-J") {
override def langType = Type.Programming
override def extensions = ".j" :: ".sj" :: Nil
},
"OpenCL" -> new Language("OpenCL") {
override def langType = Type.Programming
override def group = Some("C")
override def extensions = ".cl" :: Nil
},
"PHP" -> new Language("PHP") {
override def langType = Type.Programming
override def extensions = ".aw" :: ".ctp" :: ".php" :: ".php3" :: ".php4" :: ".php5" :: ".phpt" :: Nil
override def popular = true
override def lexer = "php"
},
"Parrot" -> new Language("Parrot") {
override def langType = Type.Programming
override def primaryExtension = ".parrot"
},
"Parrot Internal Representation" -> new Language("Parrot Internal Representation") {
override def group = Some("Parrot")
override def langType = Type.Programming
override def aliases = "pir" :: name.toLowerCase :: Nil
override def extensions = ".pir" :: Nil
},
"Parrot Assembly" -> new Language("Parrot Assembly") {
override def group = Some("Parrot")
override def langType = Type.Programming
override def aliases = "pasm" :: name.toLowerCase :: Nil
override def extensions = ".pasm" :: Nil
},
"Perl" -> new Language("Perl") {
override def langType = Type.Programming
override def overrides = ".pl" :: Nil
override def primaryExtension = ".pl"
override def extensions = ".PL" :: ".perl" :: ".ph" :: ".pl" :: ".pm" :: ".pod" :: ".psgi" :: ".t" :: Nil
override def popular = true
override def lexer = "perl"
},
"Prolog" -> new Language("Prolog") {
override def langType = Type.Programming
override def extensions = ".pl" :: ".pro" :: ".prolog" :: Nil
},
"Pure Data" -> new Language("Pure Data") {
override def langType = Type.Programming
override def extensions = ".pd" :: Nil
},
"Python" -> new Language("Python") {
override def langType = Type.Programming
override def primaryExtension = ".py"
override def extensions = ".py" :: ".pyw" :: ".wsgi" :: Nil
override def popular = true
override def lexer = "python"
},
"Python traceback" -> new Language("Python traceback") {
override def langType = Type.Data
override def group = Some("Python")
override def searchable_? = false
override def extensions = ".pytb" :: Nil
},
"R" -> new Language("R") {
override def langType = Type.Programming
override def overrides = ".r" :: Nil
override def primaryExtension = ".r"
override def extensions = ".R" :: ".r" :: Nil
},
"RHTML" -> new Language("RHTML") {
override def langType = Type.Markup
override def group = Some("HTML")
override def extensions = ".rhtml" :: Nil
},
"Racket" -> new Language("Racket") {
override def langType = Type.Programming
override def primaryExtension = ".rkt"
override def extensions = ".rkt" :: ".rktd" :: ".rktl" :: ".scrbl" :: Nil
},
"Raw token data" -> new Language("Raw token data") {
override def aliases = "raw" :: name.toLowerCase :: Nil
override def extensions = ".raw" :: Nil
},
"Rebol" -> new Language("Rebol") {
override def langType = Type.Programming
override def extensions = ".r" :: ".r2" :: ".r3" :: ".rebol" :: Nil
},
"Redcode" -> new Language("Redcode") {
override def extensions = ".cw" :: Nil
},
"Ruby" -> new Language("Ruby") {
override def langType = Type.Programming
override def aliases = "jruby" :: "macruby" :: "rake" :: "rb" :: "rbx" :: name.toLowerCase :: Nil
override def primaryExtension = ".rb"
override def extensions = ".builder" :: ".gemspec" :: ".god" :: ".irbrc" :: ".rake" :: ".rb" :: ".rbuild" :: ".rbw" :: ".rbx" :: ".ru" :: ".thor" :: ".watchr" :: Nil
override def filenames = "Capfile" :: "Rakefile" :: "Thorfile" :: "Gemfile" :: "Guardfile" :: "Vagrantfile" :: Nil
override def popular = true
override def lexer = "ruby"
},
"Rust" -> new Language("Rust") {
override def langType = Type.Programming
override def primaryExtension = ".rs"
override def extensions = ".rc" :: ".rs" :: Nil
},
"SCSS" -> new Language("SCSS") {
override def langType = Type.Markup
override def group = Some("CSS")
override def extensions = ".scss" :: Nil
},
"SQL" -> new Language("SQL") {
override def langType = Type.Data
override def searchable_? = false
override def extensions = ".sql" :: Nil
override def popular = true
override def lexer = "sql"
},
"Sage" -> new Language("Sage") {
override def langType = Type.Programming
override def group = Some("Python")
override def primaryExtension = ".sage"
override def extensions = ".sage" :: Nil
},
"Sass" -> new Language("Sass") {
override def langType = Type.Markup
override def group = Some("CSS")
override def extensions = ".sass" :: Nil
},
"Scala" -> new Language("Scala") {
override def langType = Type.Programming
override def primaryExtension = ".scala"
override def extensions = ".sbt" :: ".scala" :: Nil
override def popular = true
override def lexer = "scala"
},
"Scheme" -> new Language("Scheme") {
override def langType = Type.Programming
override def primaryExtension = ".scm"
override def extensions = ".scm" :: ".sls" :: ".sps" :: ".ss" :: Nil
override def popular = true
},
"Self" -> new Language("Self") {
override def langType = Type.Programming
override def extensions = ".self" :: Nil
},
"Shell" -> new Language("Shell") {
override def langType = Type.Programming
override def aliases = "sh" :: "bash" :: "zsh" :: name.toLowerCase :: Nil
override def primaryExtension = ".sh"
override def extensions = ".bash" :: ".sh" :: ".zsh" :: Nil
override def filenames = ".bash_profile" :: ".bashrc" :: ".profile" :: ".zlogin" :: ".zsh" :: ".zshrc" :: Nil
override def popular = true
override def lexer = "shell"
},
"Smalltalk" -> new Language("Smalltalk") {
override def langType = Type.Programming
override def extensions = ".st" :: Nil
},
"Smarty" -> new Language("Smarty") {
override def extensions = ".tpl" :: Nil
},
"Standard ML" -> new Language("Standard ML") {
override def langType = Type.Programming
override def aliases = "sml" :: name.toLowerCase :: Nil
override def primaryExtension = ".sml"
override def extensions = ".sig" :: ".sml" :: Nil
},
"SuperCollider" -> new Language("SuperCollider") {
override def langType = Type.Programming
override def extensions = ".sc" :: Nil
},
"Tcl" -> new Language("Tcl") {
override def langType = Type.Programming
override def extensions = ".tcl" :: Nil
},
"Tcsh" -> new Language("Tcsh") {
override def langType = Type.Programming
override def group = Some("Shell")
override def primaryExtension = ".tcsh"
override def extensions = ".csh" :: ".tcsh" :: Nil
override def lexer = "shell"
},
"TeX" -> new Language("TeX") {
override def langType = Type.Markup
override def primaryExtension = ".tex"
override def extensions = ".aux" :: ".cls" :: ".dtx" :: ".ins" :: ".sty" :: ".tex" :: ".toc" :: Nil
override def popular = true
},
"Text" -> new Language("Text") {
override def langType = Type.Data
override def extensions = ".txt" :: Nil
},
"Textile" -> new Language("Textile") {
override def langType = Type.Markup
override def extensions = ".textile" :: Nil
},
"Turing" -> new Language("Turing") {
override def langType = Type.Programming
override def overrides = ".t" :: Nil
override def primaryExtension = ".t"
override def extensions = ".t" :: ".tu" :: Nil
},
"Twig" -> new Language("Twig") {
override def langType = Type.Markup
override def group = Some("PHP")
override def extensions = ".twig" :: Nil
},
"VHDL" -> new Language("VHDL") {
override def langType = Type.Programming
override def primaryExtension = ".vhd"
override def extensions = ".vhd" :: ".vhdl" :: Nil
},
"Vala" -> new Language("Vala") {
override def langType = Type.Programming
override def extensions = ".vala" :: ".vapi" :: Nil
},
"Verilog" -> new Language("Verilog") {
override def langType = Type.Programming
override def extensions = ".v" :: Nil
},
"VimL" -> new Language("VimL") {
override def langType = Type.Programming
override def aliases = "vim" :: name.toLowerCase :: Nil
override def extensions = ".vim" :: Nil
override def filenames = ".gvimrc" :: ".vimrc" :: "vimrc" :: "gvimrc" :: Nil
},
"Visual Basic" -> new Language("Visual Basic") {
override def langType = Type.Programming
override def primaryExtension = ".vb"
override def extensions = ".bas" :: ".frx" :: ".vb" :: ".vba" :: ".vbs" :: Nil
override def lexer = "vbnet"
},
"XML" -> new Language("XML") {
override def langType = Type.Markup
override def primaryExtension = ".xml"
override def extensions = ".glade" :: ".kml" :: ".mxml" :: ".plist" :: ".rdf" :: ".rss" :: ".svg" :: ".wsdl" :: ".wxi" :: ".wxl" :: ".wxs" :: ".xaml" :: ".xlf" :: ".xliff" :: ".xml" :: ".xsd" :: ".xsl" :: ".xul" :: Nil
override def filenames = ".classpath" :: ".project" :: Nil
override def popular = true
override def lexer = "xml"
},
"XQuery" -> new Language("XQuery") {
override def langType = Type.Programming
override def extensions = ".xq" :: ".xqm" :: ".xquery" :: ".xqy" :: Nil
},
"XS" -> new Language("XS") {
override def extensions = ".xs" :: Nil
},
"YAML" -> new Language("YAML") {
override def langType = Type.Markup
override def primaryExtension = ".yml"
override def extensions = ".yaml" :: ".yml" :: Nil
override def filenames = ".gemrc" :: Nil
override def lexer = "yaml"
},
"mupad" -> new Language("mupad") {
override def extensions = ".mu" :: Nil
},
"ooc" -> new Language("ooc") {
override def langType = Type.Programming
override def extensions = ".ooc" :: Nil
},
"reStructuredText" -> new Language("reStructuredText") {
override def langType = Type.Markup
override def aliases = "rst" :: name.toLowerCase :: Nil
override def extensions = ".rst" :: ".rest" :: Nil
}).toMap

  def apply(name: String) = languages.get(name) orElse aliasesIndex.get(name)

  val aliasesIndex = languages.flatMap(p => p._2.aliases.map(a => a.capitalize -> p._2) ).toMap

	private val fileNameIndex = languages.flatMap(p => p._2.filenames.map(fn => fn -> p._1)).toMap
	
	private val overrides = languages.flatMap(p => p._2.overrides.map(o => o -> p._1)).toMap
	
	def ambiguous_?(extension: String) = overrides.get(extension) match {
		case None => false
		case _ => true
	}
	
	private val extensionIndex = languages.flatMap(p => p._2.extensions.filter( ! ambiguous_?(_)).map(e => e -> p._1)).toMap
	
	
	def findByFilename(path: Pathname) = 
    (fileNameIndex.get(path.basename) match {
  		case None => extensionIndex.get(path.extname)
  		case o => o
  	}) match {
     case Some(s) => apply(s)
     case _ => None 
    }

	

}

